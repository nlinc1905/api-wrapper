import os
import typing as t
from typing_extensions import Annotated
from datetime import datetime, timedelta
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import jwt, JWTError
from jose.exceptions import ExpiredSignatureError
from passlib.context import CryptContext
from sqlalchemy.orm import Session

from src.data_models import User as UserModel
from src.schemas import User, TokenData
from src.config.db import get_db


ACCESS_TOKEN_EXPIRE_MINUTES = 30
ALGORITHM = "HS256"
# SECRET_KEY lets us verify that tokens were generated by our service
# get a secret key by running `openssl rand -hex 32`
SECRET_KEY = os.environ.get('JWT_SECRET_KEY', default="09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7")

password_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


def get_password_hash(password: str) -> str:
    """Takes a plain password as input and returns its hash"""
    return password_context.hash(password)


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Takes a plain password and a hash as input and returns True if they match"""
    return password_context.verify(plain_password, hashed_password)


def get_user(db: t.Union[dict, Session], username: str) -> User:
    """If the provided username exists in the provided DB, return the user"""
    if isinstance(db, dict):
        if username in db:
            user_dict = db[username]
            return User(**user_dict)
    elif isinstance(db, Session):
        user_data = db.query(UserModel).filter_by(username=username).first()
        if user_data is not None:
            user_dict = user_data.__dict__
            return User(**user_dict)


def authenticate_user(db: t.Union[dict, Session], username: str, password: str) -> t.Union[bool, User]:
    """Checks if the user exists and that their password is correct"""
    user = get_user(db, username)
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False
    return user


def create_access_token(data: dict, expires_delta: t.Union[timedelta, None] = None) -> str:
    """Creates an OpenSSL authentication token to use for this user's API requests"""
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)], db: Session = Depends(get_db)) -> User:
    """Gets the user data model for the provided token"""
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )

    # try to authenticate
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except ExpiredSignatureError:
        raise HTTPException(status_code=403, detail="The token has expired.")
    except JWTError:
        raise credentials_exception

    # if authenticated, check if the user is in the DB
    user = get_user(db, username=token_data.username)
    if user is None:
        raise credentials_exception
    return user


async def get_current_active_user(
    current_user: Annotated[User, Depends(get_current_user)]
):
    """Validates that the user obtained from get_current_user has a status of 'active' in the DB"""
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user
